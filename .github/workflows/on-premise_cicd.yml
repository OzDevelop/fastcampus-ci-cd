name: on-premise-cicd
on:
  # 해당 워크플로를 수동으로 실행하도록 설정.
  # github에서 trigger 실행 버튼을 눌러 직접 트리거하도록.
  # 태깅 후 배포를 위해 아래와 같이 설정하는 것임.
  workflow_dispatch:
    inputs:
      tags:
        description: 'Set Tags Name'
        required: true
        default: master

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      release: ${{ steps.set-version.outputs.VERSION_NAME }}
    steps:
      - id: set-version  # v1.0.0 -> v1-0-0
        run: |
          echo "VERSION_NAME=$(echo "${{ github.event.inputs.tags }}" | sed "s/\./\-/g")" >> $GITHUB_OUTPUT

      - name: Check Version Name
        run: |
          echo "Check Version -> ${{ steps.set-version.outputs.VERSION_NAME }}"

      - name: Checkout Source Code
        uses: actions/checkout@v4 # checkout 기능 v4 버전 액션을 사용.'
        with:
          ref: '${{ github.event.inputs.tags }}'

      - name: Grant execute permission for gradlew
        run: chmod +w gradlew

      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'

      - name: Build with Gradlew
        run: ./gradlew clean test bootJar

      - name: Add version
        run: |
          mv build/libs/cicd-study/cicd-study-0.0.1-SNAPSHOT build/libs/cicd-study-${{ steps.set-version.outputs.VERSION_NAME }}.jar

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: cicd-study-application # cicd-study-application.zip
          path: build/libs/cicd-study-${{ steps.set-version.outputs.VERSION_NAME }}.jar


  deploy:
    runs-on: ubuntu-latest
    needs:  # build job이 끝난 후 실행될 수 있도록 의존성 설정(기본적으로 병렬 처리하기 때문에 설정이 필요함)
      - build

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: cicd-study-application # cicd-study-application.zip
          path: build/libs/

      - name: Deploy to EC2
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          scp -i private_key.pem -o StrictHostKeyChecking=no build/libs/cicd-study-${{ needs.build.outputs.release }}.jar ${{ secrets.EC2_USER_NAME }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER_NAME }}/cicd-study-${{ needs.build.outputs.release }}.jar
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER_NAME }}@${{ secrets.EC2_HOST }} "pgrep java | xargs kill -9; nohup java -jar /home/${{ secrets.EC2_USER_NAME }}/cicd-study-${{ needs.build.outputs.release }}.jar > app.log 2>&1 &"
          rm -f private_key.pem
